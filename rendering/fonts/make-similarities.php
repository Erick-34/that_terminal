<?php
$names = Array();
$codes = Array();

$fp = fopen('UnicodeData.txt', 'r');
while($s = fgets($fp,4096))
  if(preg_match('/^([0-9A-F]+);([^;]+)/', $s, $mat))
  {
    $name = $mat[2];
    if(preg_match('/(MATHEMATICAL.*) (CAPITAL|SMALL) ([A-Z])$/', $name, $m))
    {
      $name = "{$m[1]} LATIN {$m[2]} LETTER {$m[3]}";
    }
    
    $codes[$name] = hexdec($mat[1]);
    $names[hexdec($mat[1])] = $name;
  }

$lines = Array();

function ToUTF8($code)
{
  return iconv('ucs4', 'utf8', pack('N',$code));
}
function SubstFor($code,$name,   $base,$attrs=Array())
{
  global $names,$codes,$lines;
  if(count($attrs)) $base .= ' WITH '.join(' AND ',$attrs);
  if(isset($codes[$base]))
  {
    $lines[] = sprintf("Array(0x%X /*%s*/, 0x%X/*%s*/), // Make %s from %s\n",
      $codes[$base], ToUTF8($codes[$base]),
      $code,         ToUTF8($code),
      $name, $base);
  }
  #else
  #  printf("// Unable to make %s from %s\n", $name, $base);
}

foreach($codes as $name=>$code)
  if(preg_match('/(.*) WITH (.*)/', $name, $mat))
  {
    $base = $mat[1];
    $attrs = explode(' AND ', $mat[2]);
    $len = count($attrs);
    for($n=$len-1; $n>0; --$n)
    {
      $pick = Array();
      $do = function($index,$start)use(&$attrs,&$pick,$n,$len,$code,$name,$base,&$do)
      {
        for($a=$start; $a<$len; ++$a)
        {
          $pick[$index] = $attrs[$a];
          if($index+1 == $n) SubstFor($code,$name, $base,$pick);
          else               $do($index+1, $a+1);
        }
      };
      $do(0, 0);
    }
  }

foreach($codes as $name=>$code)
  if(preg_match('/(.*) WITH (.*)/', $name, $mat))
  {
    $base = $mat[1];
    SubstFor($code,$name, $base);
  }

// Create special matching recipe for ASCII from FULLWIDTH
foreach($codes as $name=>$code)
{
  if(preg_match('/^(FULLWIDTH|HALFWIDTH) (.*)/', $name, $mat) && isset($codes[$mat[2]]))
    SubstFor($codes[$mat[2]],$mat[2], $name);
}

$words = Array('PARENTHESIZED','CIRCLED','BLACK','WHITE','HEAVY','LIGHT','FULLWIDTH','HALFWIDTH','SMALL','TAG',
               'MATHEMATICAL BOLD',                  // 1D400,1D41A
               'MATHEMATICAL ITALIC',                // 1D434,1D44E
               'MATHEMATICAL BOLD ITALIC',           // 1D468,1D482
               'MATHEMATICAL SCRIPT',                // 1D49C,1D4B6
               'MATHEMATICAL BOLD SCRIPT',           // 1D4D0,1D4EA
               'MATHEMATICAL FRAKTUR',               // 1D504,1D51E
               'MATHEMATICAL DOUBLE-STRUCK',         // 1D538,1D552
               'MATHEMATICAL BOLD FRAKTUR',          // 1D56C,1D586
               'MATHEMATICAL SANS-SERIF',            // 1D5A0,1D5BA
               'MATHEMATICAL SANS-SERIF BOLD',       // 1D5D4,1D5EE
               'MATHEMATICAL SANS-SERIF ITALIC',     // 1D608,1D622
               'MATHEMATICAL SANS-SERIF BOLD ITALIC',// 1D63C,1D656
               'MATHEMATICAL MONOSPACE');            // 1D670,1D68A
foreach($codes as $name=>$code)
  if(preg_match('/^('.join('|',$words).') (.*)/', $name, $mat))
    foreach($words as $w)
      if($w != $mat[1])
        SubstFor($code,$name, "$w {$mat[2]}");
foreach($codes as $name=>$code)
  if(preg_match('/^('.join('|',$words).') (.*)/', $name, $mat))
    SubstFor($code,$name, $mat[2]);

function MathGen($begin,$c)
{
  $c=ord($c);
  if($c>=0x61) $n = $begin + 26 + $c-0x61;
  else         $n = $begin +      $c-0x41;
  return sprintf('0x%X', $n);
}
print "<?php\n";
?>
  $identical = Array
  (
    // Autogenerated list 1, of fullwidths
<?php
    foreach($lines as $s)
      if(preg_match('@^Array.0xFF.. .*, 0x[3-7]./@', $s))
        print $s;
?>
    // End autogenerated list 1
    // Math: 
    
    Array(0x2102, <?php print MathGen(0x1D538,'C');?>), // double-struck C
    Array(0x210A, <?php print MathGen(0x1D49C,'g');?>), // script g
    Array(0x210B, <?php print MathGen(0x1D504,'H');?>), // fraktur H
    Array(0x210C, <?php print MathGen(0x1D504,'h');?>), // fraktur h
    Array(0x210D, <?php print MathGen(0x1D538,'H');?>), // double-struck H
    Array(0x210E, <?php print MathGen(0x1D434,'H');?>), // italic H
    Array(0x2110, <?php print MathGen(0x1D49C,'I');?>), // script I
    Array(0x2111, <?php print MathGen(0x1D504,'I');?>), // fraktur I
    Array(0x2112, <?php print MathGen(0x1D504,'L');?>), // fraktur L
    Array(0x2113, <?php print MathGen(0x1D49C,'l');?>), // script l
    Array(0x2115, <?php print MathGen(0x1D538,'N');?>), // double-struck N
    Array(0x2119, <?php print MathGen(0x1D538,'P');?>), // double-struck P
    Array(0x211A, <?php print MathGen(0x1D538,'Q');?>), // double-struck Q
    Array(0x211B, <?php print MathGen(0x1D49C,'R');?>), // script R
    Array(0x211C, <?php print MathGen(0x1D504,'R');?>), // fraktur R
    Array(0x211D, <?php print MathGen(0x1D538,'R');?>), // double-struck R
    Array(0x2124, <?php print MathGen(0x1D538,'Z');?>), // double-struck Z
    Array(0x212A, <?php print MathGen(0x1D5A0,'K');?>), // sans-serif K
    Array(0x212C, <?php print MathGen(0x1D49C,'B');?>), // script B
    Array(0x212D, <?php print MathGen(0x1D504,'C');?>), // fraktur C
    Array(0x212E, <?php print MathGen(0x1D538,'e');?>), // double-struck e
    Array(0x212F, <?php print MathGen(0x1D434,'e');?>), // italic e
    Array(0x2133, <?php print MathGen(0x1D49C,'M');?>), // script M
    Array(0x2134, <?php print MathGen(0x1D5A0,'o');?>), // sans-serif o
    Array(0x2139, <?php print MathGen(0x1D400,'i');?>), // bold i
    Array(0x2145, <?php print MathGen(0x1D538,'D');?>), // double-struck italic D
    Array(0x2146, <?php print MathGen(0x1D538,'d');?>), // double-struck italic d
    Array(0x2147, <?php print MathGen(0x1D538,'e');?>), // double-struck italic e
    Array(0x2148, <?php print MathGen(0x1D538,'i');?>), // double-struck italic i
    Array(0x2149, <?php print MathGen(0x1D538,'j');?>), // double-struck italic j
    Array(0x2140, 0x1D6BA), // double-struck capital sigma
    Array(0x213F, 0x1D6B7), // double-struck capital pi
    Array(0x213E, 0x1D6AA), // double-struck capital gamma
    Array(0x213D, 0x1D6C4), // double-struck small gamma
    Array(0x213C, 0x1D6D1), // double-struck small pi
    Array(0x2117, 0x24C5), // encircled P
    Array(0xA9,   0x24B8), // encircled C
    Array(0xAD,   0x24C7), // encircled R
    
    Array(33 /* ! */, 451 /* ǃ */),
    Array(35 /* # */,                               0x2d4c,0xa59b,0x2317,0x22d5),
    Array(43 /* + */, 0x2795 /* ➕ */, 0x1690 /* ᚐ */),
    Array(45 /* - */, 0x2212 /* − */, 0x2013 /* – */, 0x2796 /* ➖ */),
    Array(47 /* / */,                                               0x27cb,0x338,0x2571,0x2044,0x1d23a),
    Array(92 /* \ */,                                               0x20e5,0x27cd,0x2572,0x1d23b,0x29f9,0x29f5),
    Array(51 /* 3 */,                0x417 /* З */, 0x1d7f9,0x10d5,0xc69,0x1d206),
    Array(52 /* 4 */,                               0x13CE /* Ꮞ */),
    Array(56 /* 8 */,                                               0x1031a),
    Array(58 /* : */,                               0x5c3,0xa789,0x205a,0x2d0,0x2236,0x589,0x703,0x1d108),
    Array(59 /* ; */, 0x37E /* ; */, ),
    Array(61 /* = */,                                               0xa60c,0x268c,0x30a0,0x1400),
    Array(65 /* A */, 0x391 /* Α */, 0x410 /* А */, 0x13AA /* Ꭺ */, 0x15c5, 0x15cb,0x10300),
    Array(66 /* B */, 0x392 /* Β */, 0x412 /* В */, 0x13F4 /* Ᏼ */, 0x2C82 /* Ⲃ */, 0xa557,0x10301),
    Array(67 /* C */, 0x3F9 /* Ϲ */, 0x421 /* С */, 0x13DF /* Ꮯ */, 0x2CA4 /* Ⲥ */),
    Array(68 /* D */,                               0x13A0 /* Ꭰ */, 0x10303,0x15de,0x216e),
    Array(69 /* E */, 0x395 /* Ε */, 0x415 /* Е */, 0x13AC /* Ꭼ */, 0x2d39,0xa5cb,0x22ff),
    Array(70 /* F */, 0x3DC /* Ϝ */,                                0x1d213,0x7d3,0x15b4,0x10305,),
    Array(71 /* G */,                               0x13C0 /* Ꮐ */, 0x10ba,),
    Array(72 /* H */, 0x397 /* Η */, 0x41D /* Н */, 0x13BB /* Ꮋ */, 0x2C8E /* Ⲏ */, 0x157c,0xa5be),
    Array(73 /* I */, 0x399 /* Ι */, 0x406 /* І */, 0x4C0 /* Ӏ */, 0x13C6 /* Ꮖ */, 0x2C92 /* Ⲓ */),
    Array(74 /* J */,                0x408 /* Ј */,                 0x148d,0x644,0xfedd,0x13ab),
    Array(75 /* K */, 0x39A /* Κ */, 0x41A /* К */, 0x2C94 /* Ⲕ */, 0x13E6 /* Ꮶ */, 0x212A /* K */, 0x1030a,),
    Array(76 /* L */,                               0x13DE /* Ꮮ */, 0x14aa,0x1d22a,0x216c,0x2ea,0x53c,),
    Array(77 /* M */, 0x39C /* Μ */, 0x41C /* М */, 0x13B7 /* Ꮇ */, 0x2C98 /* Ⲙ */, 0x3fa,0x10311,),
    Array(78 /* N */, 0x39D /* Ν */,                                0x2C9A /* Ⲛ */,),
    Array(79 /* O */, 0x39F /* Ο */, 0x41E /* О */, 0x2C9E /* Ⲟ */,                 0x25ef,0x25cb,0x20dd,0x274d,0x1f315,0x2d54,0x555,0x26aa,0x2b55),
    Array(80 /* P */, 0x3A1 /* Ρ */, 0x420 /* Р */, 0x13E2 /* Ꮲ */, 0x2CA2 /* Ⲣ */, 0x10313,0x146d,0x1031b),
    Array(81 /* Q */,                                                               0x10ad,0x51a,0xa756,0x10b3,0x2d55,0x211a),
    Array(82 /* R */,                               0x13A1 /* Ꭱ */, 0x1d216, 0x1587, 0x13d2),
    Array(83 /* S */,                0x405 /* Ѕ */, 0x13DA /* Ꮪ */,                 0x54f,0x10bd,0xa682,0x93d,0x10496,0xa576),
    Array(84 /* T */, 0x3A4 /* Τ */, 0x422 /* Т */, 0x13A2 /* Ꭲ */, 0x2CA6 /* Ⲧ */, 0x22a4,0x27d9,0xa50b,0x1d36e,0x1f768,0x23c9,0x7e0),
    Array(85 /* U */,                                                               0x22c3,0x144c,0x222a,0x54d),
    Array(86 /* V */,                               0x13D9 /* Ꮩ */,                 0x142f,0x2d38,0x22c1,0x1d20d,0x2164,),
    Array(                           0x51C /* Ԝ */,                 0x2CB0 /* Ⲱ */, 0x460 /* Ѡ */),
    Array(87 /* W */,                0x51C /* Ԝ */, 0x13B3 /* Ꮃ */),
    Array(88 /* X */, 0x3A7 /* Χ */, 0x425 /* Х */,                 0x2CAC /* Ⲭ */, 0x2573,0x2d5d,0x10322,0x2169,0x10317,),
    Array(89 /* Y */, 0x3A5 /* Υ */, 0x4AE /* Ү */,                 0x2CA8 /* Ⲩ */, ),
    Array(90 /* Z */, 0x396 /* Ζ */,                0x13C3 /* Ꮓ */, 0x2C8C /* Ⲍ */, ),
    Array(97  /* a */,                0x430 /* а */),
    Array(99  /* c */, 0x3F2 /* ϲ */, 0x441 /* с */,                0x2CA5 /* ⲥ */),
    Array(101 /* e */,                0x435 /* е */),
    Array(105 /* i */,                0x456 /* і */),
    Array(106 /* j */, 0x3F3 /* ϳ */, 0x458 /* ј */),
    Array(111 /* o */, 0x3BF /* ο */, 0x43E /* о */, 0x5E1 /* ס */, 0x1D0F /* ᴏ */, 0x2C9F /* ⲟ */),
    Array(112 /* p */, 0x3C1 /* ρ */, 0x440 /* р */,                                0x2CA3 /* ⲣ */),
    Array(113 /* q */,                               0x51B /* ԛ */),
    Array(115 /* s */,                0x455 /* ѕ */),
    Array(118 /* v */,                                              0x1D20 /* ᴠ */),
    Array(             0x3C9 /* ω */, 0x51D /* ԝ */,                0x2CB1 /* ⲱ */, 0x2375 /* ⍵ */, 0x461 /* ѡ */),
    Array(119 /* w */, 0x3C9 /* ω */,                0x1D21 /* ᴡ */),
    Array(120 /* x */,                0x445 /* х */,                0x2CAD /* ⲭ */),
    Array(121 /* y */,                0x443 /* у */,                0x2CA9 /* ⲩ */),
    Array(122 /* z */,                                              0x1D22 /* ᴢ */, 0x2C8D /* ⲍ */),
    Array(126 /* ~ */,                                              0x1FC0 /* ῀ */),
    Array(               0x26A /* ɪ */, 0x2C93 /* ⲓ */, 305 /* ı */),
    Array(0x3BA /* κ */, 0x1D0B /* ᴋ */, 0x432 /* к */, 0x2C95 /* ⲕ */),
    Array(               0x299  /* ʙ */, 0x432 /* в */, 0x2C83 /* ⲃ */),
    Array(               0x29C  /* ʜ */, 0x43D /* н */, 0x2C8F /* ⲏ */),
    Array(               0x1D0D /* ᴍ */, 0x43c /* м */, 0x2C99 /* ⲙ */),
    Array(               0x274  /* ɴ */,                0x2C9B /* ⲛ */),
    Array(               0x1D1B /* ᴛ */, 0x442 /* т */, 0x2CA7 /* ⲧ */),
    Array(               239    /* ï */, 0x457 /* ї */),
    Array(               0x1E30 /* Ḱ */, 0x40C /* Ќ */),
    Array(               200    /* È */, 0x400 /* Ѐ */),
    Array(               203    /* Ë */, 0x401 /* Ё */),
    Array(0x3AA /* Ϊ */, 207    /* Ï */, 0x407 /* Ї */),
    Array(0x3AB /* Ϋ */, 376    /* Ÿ */),
    Array(0x3A8 /* Ψ */, 0x2CAE /* Ⲯ */),
    Array(0x3C8 /* ψ */, 0x2CAF /* ⲯ */),
    Array(),
    Array(0x393 /* Γ */,                 0x413 /* Г */, 0x13B1 /* Ꮁ */, 0x2C84 /* Ⲅ */),
    Array(0x3CC /* ό */, 243    /* ó */),
    Array(0x3F4 /* ϴ */, 0x3B8  /* θ */, 0x472 /* Ѳ */, 0x4E8 /* Ө */, 415 /* Ɵ */, 0x13BE /* Ꮎ */, 0x2C90 /* Ⲑ */),
    Array(               258    /* Ă */, 0x4D0 /* Ӑ */, 0x1fb8 /* Ᾰ */),
    Array(               256    /* Ā */,                0x1fb9 /* Ᾱ */),
    Array(               259    /* ă */, 0x4D1 /* ӑ */),
    Array(               196    /* Ä */, 0x4D2 /* Ӓ */),
    Array(               228    /* ä */, 0x4D3 /* ӓ */),
    Array(               198    /* Æ */, 0x4D4 /* Ӕ */),
    Array(               230    /* æ */, 0x4D5 /* ӕ */),
    Array(               276    /* Ĕ */, 0x4D6 /* Ӗ */),
    Array(               277    /* ĕ */, 0x4D7 /* ӗ */),
    Array(               214    /* Ö */, 0x4E6 /* Ӧ */),
    Array(               246    /* ö */, 0x4E7 /* ӧ */),
    Array(0x3A6 /* Φ */,                 0x424 /* Ф */, 0x2CAA /* Ⲫ */),
    Array(                               0x444 /* ф */, 0x2CAB /* ⲫ */),
    Array(0x387 /* · */, 183    /* · */),
    Array(0x3F5 /* ϵ */,                 0x454 /* є */),
    Array(0x37B /* ͻ */, 0x254 /* ɔ */, 0x1D10 /* ᴐ */),
    Array(               0x259 /* ə */,  0x4D9 /* ә */),
    Array(               0x25c /* ɜ */,  0x437 /* з */, 0x1D08 /* ᴈ */),
    Array(               0x275 /* ɵ */,  0x4E9 /* ө */, 0x2C91 /* ⲑ */),
    Array(               339   /* œ */,  0x276 /* ɶ */),
    Array(               0x292 /* ʒ */,  0x4E1 /* ӡ */),
    Array(               386 /* Ƃ */,  0x411 /* Б */),
    Array(0x3FD /* Ͻ */, 390 /* Ɔ */),
    Array(0x3A3 /* Σ */, 425 /* Ʃ */,                   0x2211/*∑*/, 0x2140,0x1a9,0x2d49),
    Array(0x3C5 /* υ */, 651 /* ʋ */),
    Array(               439 /* Ʒ */, 0x4E0 /* Ӡ */),
Array(0x20, 0x3000, 0xA0,0x2000,0x2001,0x2002,0x2003,0x2004,0x2005,0x2006,0x2009), // Make SPACE from IDEOGRAPHIC SPACE (also several other spaces)
    // Autogenerated list excluding fullwidths we did earlier
<?php
    foreach($lines as $s)
      if(!preg_match('@^Array.0xFF.. .*, 0x[3-7]./@', $s))
        print $s;
?>
    // End autogenerated list
    Array(0x3ED /* ϭ */, 0x431 /* б */),
    Array(0x3A0 /* Π */,                 0x41F /* П */, 0x2CA0 /* Ⲡ */),
    Array(0x3C0 /* π */, 0x43F /* п */, 0x1D28 /* ᴨ */, 0x2CA1 /* ⲡ */),
    Array(0x376 /* Ͷ */, 0x418 /* И */),
    Array(0x377 /* ͷ */, 0x438 /* и */),
    Array(0x3B9 /* ι */, 617 /* ɩ */),
    Array(242 /* ò */, 0x1F78 /* ὸ */),
    Array(243 /* ó */, 0x1F79 /* ό */),
    Array(                           0x44F /* я */, 0x1D19 /* ᴙ */),
    Array(                           0x433 /* г */, 0x1D26 /* ᴦ */, 0x2C85 /* ⲅ */),
    Array(               652 /* ʌ */, 0x1D27 /* ᴧ */),
    Array(               603 /* ɛ */, 0x511 /* ԑ */),
    Array(               400 /* Ɛ */, 0x510 /* Ԑ */),
    Array(               0x42C /* Ь */, 0x13CF /* Ꮟ */),
    Array(               197 /* Å */, 0x212B /* Å */),
    Array(0x278A /*➊*/, 0x2776/*❶*/, 0x24F5/*⓵*/, 0x2780/*➀*/, 0x2460/*①*/, 48/*0*/),
    Array(0x278B /*➋*/, 0x2777/*❷*/, 0x24F6/*⓶*/, 0x2781/*➁*/, 0x2461/*②*/, 49/*1*/),
    Array(0x278C /*➌*/, 0x2778/*❸*/, 0x24F7/*⓷*/, 0x2782/*➂*/, 0x2462/*③*/, 50/*2*/),
    Array(0x278D /*➍*/, 0x2779/*❹*/, 0x24F8/*⓸*/, 0x2783/*➃*/, 0x2463/*④*/, 51/*3*/),
    Array(0x278E /*➎*/, 0x277A/*❺*/, 0x24F9/*⓹*/, 0x2784/*➄*/, 0x2464/*⑤*/, 52/*4*/),
    Array(0x278F /*➏*/, 0x277B/*❻*/, 0x24FA/*⓺*/, 0x2785/*➅*/, 0x2465/*⑥*/, 53/*5*/),
    Array(0x2790 /*➐*/, 0x277C/*❼*/, 0x24FB/*⓻*/, 0x2786/*➆*/, 0x2466/*⑦*/, 54/*6*/),
    Array(0x2791 /*➑*/, 0x277D/*❽*/, 0x24FC/*⓼*/, 0x2787/*➇*/, 0x2467/*⑧*/, 55/*7*/),
    Array(0x2792 /*➒*/, 0x277E/*❾*/, 0x24FD/*⓽*/, 0x2788/*➈*/, 0x2468/*⑨*/, 56/*8*/),
    Array(0x2793 /*➓*/, 0x277F/*❿*/, 0x24FE/*⓾*/, 0x2789/*➉*/, 0x2469/*⑩*/, 57/*9*/),   
    Array(247 /* ÷ */, 0x2797 /* ➗ */),
    Array(0x42F /* Я */, 0x1586),
    Array(0x394 /* Δ */, 0xa554 /* ꕔ */),
    Array(0x3c,0x304f,0x10302,0x1438,0x1449),
  );
